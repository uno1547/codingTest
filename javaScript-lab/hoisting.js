/* 얜 ㅜ머냐
function a() {
  console.log(z);
}
a()
const z = 'hi'
*/ 

//var, let, const 

//1. var
/*
- var 은 재할당, 재선언 모두 가능하다
- var 은 hoisting되어 변수의 선언부가 최상단으로 끌어올려진다. 호이스팅
호이스팅 : 프로그램 실행이전에 코드 평가과정에서 선언부들이 코드 최상단으로 끌어올려진다고할수있다. 
따라서 호이스팅 이후 프로그램을 실행하게되면, 모든 선언은 이미 이루어진것처럼 동작하는것이다. > 가독성이 떨어지고 오류발생가능성이 높아진다!!
- var 은 function scope를 따른다 > 블럭 내부에서 정의된 var변수는 지역스코프를 갖지않는다.
스코프 : 식별자 결정을 위한 범위
- var로 전역변수를 선언시 window(전역객체)의 프로퍼티가 된다. (let은 전역변수로 선언해도 그렇지않다)
*/

//2. let
/*
- let은 재할당은 가능
- let으로 선언된 변수는 block scope를 가짐
- let 으로 선언된 변수의 선언부가 hoisting되긴하지만 undefined가 아닌 에러가뜬다
TDZ : 선언문 이전에 접근을 시도할경우, 
*/

//3. const
/*
- const는 선언과 동시에 초기화 해야함(재할당도 안되기에, 당연한결과)
- const는 block scope를 가짐
- const는 재할당 불가
- 선언이전 접근 불가
*/